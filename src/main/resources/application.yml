server:
  port: 9002
  shutdown: graceful # ??? ??? ???
  netty:
    connection-timeout: 2s # ??? TCP ??? ???? ?? ???? ??
    idle-timeout: 15s # ???? ???? ?? ?? TCP ??? ?? ?? ???? ??

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/PolarBookshop
  application:
    name: order-service
  lifecycle:
    timeout-per-shutdown-phace: 15s # 15? ?? ??? ?? ??? ??
  r2dbc:
    username: user
    password: password
    url: r2dbc:postgresql://localhost:5432/polardb_order
    pool:
      max-create-connection-time: 2s # ??? ?? ?? ??? ?? ??? ??? ? ?? ???? ??
      initial-size: 5
      max-size: 10
  cloud:
    function:
      definition: dispatchOrder # 스프링 클라우드 함수에 의해 관리될 함수 정의
    stream:
      bindings:
        dispatchOrder-in-0: # 입력 바인딩
          destination: order-dispatched # 바인더를 연결할 대상의 브로커에서의 실제 이름 (래빗MQ의 익스체인지)
          group: {spring:application:name}
        acceptOrder-out-0: # StreamBridge에 의해 생성되고 관리되는 출력 바인딩
          destination: order-accepted # 바인더를 (래빗MQ의 익스체인지에) 연결할 대상의 브로커에서의 실제 이름

      rabbit: # 스프링 클라우드 스트림 바인딩에 대한 래빗MQ 설정
        bindings:
          acceptOrder-out-0:
            producer:
              transacted: true # 트랜잭션 지원 활성화
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s
  flyway:
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://localhost:5432/polardb_order

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

management:
  endpoints:
    web:
      exposure:
#        include: bindings, configprops, env, flyway, functions, health, heapdump, info, loggers, mappings, prometheus
        include: health, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
#  info:
#    env:
#      enabled: true
#    java:
#      enabled: true
#    os:
#      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

polar:
  catalog-service-uri: "http://localhost:9001"